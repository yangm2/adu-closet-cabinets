// side-by-side open lower custom cabinets
// features:
// * fit within closet bay
// * LHS
// * drawer for cutlery
// * shelf for side-by-side trash/recycling
// * RHS
// * bay for mini-fridge
// * butcher-block counter-top
// * 1/2" partial face trim
// * recessed for toe-kick


// lang-ref: https://zoo.dev/docs/kcl


// Rev-A-Shelf Double 30-Quart Pullout Under Cabinet Trash Can with Soft Open & Close Slide System, Metallic Silver, Maple Wood Bottom 4WCBM-2430DM-2
// https://www.amazon.com/gp/product/B0019CPKRG/ref=sw_img_1?smid=A1DXN92KCKEQV4&psc=1
trashDrawer = {
  height: 19.25,
  width: 20.25,
  depth: 21.75
}

refrigerator = { height: 33, width: 19, depth: 20.5 }

counter = { thickness: 1 }

outerPanel = { thickness: 0.75 }
innerPanel = { thickness: 0.5 }

trim = {
  height: 2.5,
  // toekick height
  profile: 2 * outerPanel.thickness,
  thickness: 0.5
}

// FIXME: want >3"
cabinetToeKick = { depth: 2.75 }

topBrace = {
  depth: 4,
  thickness: outerPanel.thickness
}
drawer = { height: 8 }

// FIXME: want top of counter to be 34-36"!!!
// many of the cabinet dimensions are keyed off of this
lhsPanel = {
  // measured from back wall to flush with closet face
  depth: 25.25,
  height: refrigerator.height + 0.5 + trim.height + topBrace.thickness,
  // trim.profile
}
counterTopHeight = lhsPanel.height + counter.thickness
// assertLessThanOrEq(counterHeight, 36, "top of counter is TOO tall!")


lowerShelfHeight = lhsPanel.height - trim.height - drawer.height
assertGreaterThanOrEq(lowerShelfHeight, trashDrawer.height, "Lower shelf does not fit Trash Drawer")
assertGreaterThanOrEq(lhsPanel.depth - cabinetToeKick.depth - outerPanel.thickness, trashDrawer.depth, "Cabinet depth does not fit Trash Drawer")

trashCabinet = { width: trashDrawer.width + 2 }
// TODO: remove extra slack???
_slack = 2.5 + 3
refCabinet = {
  width: refrigerator.width + 2 + _slack
}

// function that draws a simple box (i.e. sheet of plywood)
fn extrudedBox = (where, dim) => {
  length = dim.length
  width = dim.width
  thickness = dim.height
  b = startSketchOn(where.plane)
    |> startProfileAt(where.origin, %)
    |> angledLine([0, width], %, $rectangleSegmentA001)
    |> angledLine([
         segAng(rectangleSegmentA001) + 90,
         length
       ], %, $rectangleSegmentB001)
    |> angledLine([
         segAng(rectangleSegmentA001),
         -segLen(rectangleSegmentA001)
       ], %, $rectangleSegmentC001)
    |> lineTo([profileStartX(%), profileStartY(%)], %)
    |> close(%)
    |> extrude(thickness, %)
  return {
  length: length,
  width: width,
  thickness: thickness,
  extrudedBox: b
}
}

// FIT: scribe to back wall?
// FIT: notch out corners for closet posts
counterTop = extrudedBox({
  plane: offsetPlane('XY', lhsPanel.height),
  origin: [-3.5, 0 - (7 / 16)]
}, {
  length: lhsPanel.depth + 7 / 16,
  width: 50 + 2 * 3.5,
  height: counter.thickness
})

facetrim = {
  upper: extrudedBox({
    plane: offsetPlane('XZ', 0 - cabinetToeKick.depth),
    origin: [
      outerPanel.thickness,
      lhsPanel.height - trim.profile
    ]
  }, {
    length: trim.profile,
    width: trashCabinet.width + refCabinet.width,
    height: trim.thickness
  }),
  vertical: extrudedBox({
    plane: offsetPlane('XZ', 0 - cabinetToeKick.depth),
    origin: [trashCabinet.width, trim.height]
  }, {
    length: lhsPanel.height - trim.height - trim.profile,
    width: trim.profile,
    height: trim.thickness
  }),
  toe: extrudedBox({
    plane: offsetPlane('XZ', 0 - cabinetToeKick.depth),
    origin: [outerPanel.thickness, 0]
  }, {
    length: trim.height,
    width: trashCabinet.width + refCabinet.width,
    height: trim.thickness
  })
}

fn cabinet = () => {
  lhsPanelHeight = lhsPanel.height
  lhsPanelDepth = lhsPanel.depth

  lhsPanel = extrudedBox({ plane: 'YZ', origin: [0, 0] }, {
    length: lhsPanel.height,
    width: lhsPanel.depth,
    height: outerPanel.thickness
  })

  rhsPanel = extrudedBox({
    plane: offsetPlane('YZ', trashCabinet.width),
    origin: [cabinetToeKick.depth, 0]
  }, {
    length: lhsPanelHeight,
    width: lhsPanelDepth - cabinetToeKick.depth,
    height: outerPanel.thickness
  })

  backPanel = extrudedBox({
    plane: offsetPlane('XZ', 0 - lhsPanelDepth),
    origin: [
      outerPanel.thickness,
      trim.height - outerPanel.thickness
    ]
  }, {
    length: lhsPanelHeight - trim.height + outerPanel.thickness,
    width: trashCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  })

  bottomPanel = extrudedBox({
    plane: offsetPlane('XY', trim.height - outerPanel.thickness),
    origin: [
      outerPanel.thickness,
      cabinetToeKick.depth
    ]
  }, {
    length: lhsPanelDepth - cabinetToeKick.depth - outerPanel.thickness,
    width: trashCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  })

  frontBrace = extrudedBox({
    plane: offsetPlane('XY', lhsPanelHeight - outerPanel.thickness),
    origin: [
      outerPanel.thickness,
      cabinetToeKick.depth
    ]
  }, {
    length: topBrace.depth,
    width: trashCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  })

  rearBrace = extrudedBox({
    plane: offsetPlane('XY', lhsPanelHeight - outerPanel.thickness),
    origin: [
      outerPanel.thickness,
      lhsPanelDepth - topBrace.depth
    ]
  }, {
    length: topBrace.depth,
    width: trashCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  })

  return {
  leftPanel: lhsPanel,
  rightPanel: rhsPanel,
  backPanel: backPanel,
  bottomPanel: bottomPanel,
  frontBrace: frontBrace,
  rearBrace: rearBrace
}
}

cabinetWithShelf = {
  shelf: extrudedBox({
    plane: offsetPlane("XY", lowerShelfHeight + trim.height + innerPanel.thickness),
    origin: [
      outerPanel.thickness,
      cabinetToeKick.depth
    ]
  }, {
    length: lhsPanel.depth - cabinetToeKick.depth - outerPanel.thickness,
    width: trashCabinet.width - outerPanel.thickness,
    height: innerPanel.thickness
  }),
  cabinet: cabinet()
}

rightCabinet = {
  leftPanel: extrudedBox({
    plane: offsetPlane('YZ', trashCabinet.width + outerPanel.thickness),
    origin: [cabinetToeKick.depth, 0]
  }, {
    length: lhsPanel.height,
    width: lhsPanel.depth - cabinetToeKick.depth,
    height: outerPanel.thickness
  }),
  rightPanel: extrudedBox({
    plane: offsetPlane("YZ", trashCabinet.width + outerPanel.thickness + refCabinet.width),
    origin: [0, 0]
  }, {
    length: lhsPanel.height,
    width: lhsPanel.depth,
    height: outerPanel.thickness
  }),
  backPanel: extrudedBox({
    plane: offsetPlane('XZ', 0 - lhsPanel.depth),
    origin: [
      2 * outerPanel.thickness + trashCabinet.width,
      trim.height - outerPanel.thickness
    ]
  }, {
    length: lhsPanel.height - trim.height + outerPanel.thickness,
    width: refCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  }),
  bottomPanel: extrudedBox({
    plane: offsetPlane('XY', trim.height - outerPanel.thickness),
    origin: [
      2 * outerPanel.thickness + trashCabinet.width,
      cabinetToeKick.depth
    ]
  }, {
    length: lhsPanel.depth - cabinetToeKick.depth - outerPanel.thickness,
    width: refCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  }),
  frontBrace: extrudedBox({
    plane: offsetPlane('XY', lhsPanel.height - outerPanel.thickness),
    origin: [
      2 * outerPanel.thickness + trashCabinet.width,
      cabinetToeKick.depth
    ]
  }, {
    length: topBrace.depth,
    width: refCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  }),
  rearBrace: extrudedBox({
    plane: offsetPlane('XY', lhsPanel.height - outerPanel.thickness),
    origin: [
      2 * outerPanel.thickness + trashCabinet.width,
      lhsPanel.depth - topBrace.depth
    ]
  }, {
    length: topBrace.depth,
    width: refCabinet.width - outerPanel.thickness,
    height: outerPanel.thickness
  })
}
